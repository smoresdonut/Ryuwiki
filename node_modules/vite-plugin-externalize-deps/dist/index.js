import { existsSync, readFileSync } from 'fs';
import { join } from 'path';
export const externalizeDeps = (options = {}) => {
    const optionsResolved = {
        deps: true,
        peerDeps: true,
        useFile: join(process.cwd(), 'package.json'),
        // User options take priority.
        ...options,
    };
    return {
        name: 'vite-plugin-externalize-deps',
        config: (_config, _env) => {
            if (existsSync(optionsResolved.useFile)) {
                const externalDeps = new Set();
                const { dependencies = {}, peerDependencies = {} } = JSON.parse(readFileSync(optionsResolved.useFile).toString());
                if (optionsResolved.deps) {
                    Object.keys(dependencies).forEach((dep) => {
                        const depMatcher = new RegExp(`${dep}(?:/.+)?`);
                        externalDeps.add(depMatcher);
                    });
                }
                if (optionsResolved.peerDeps) {
                    Object.keys(peerDependencies).forEach((dep) => {
                        const depMatcher = new RegExp(`${dep}(?:/.+)?`);
                        externalDeps.add(depMatcher);
                    });
                }
                return {
                    build: {
                        rollupOptions: {
                            external: [
                                ...externalDeps.values(),
                            ],
                        },
                    },
                };
            }
        },
    };
};
//# sourceMappingURL=index.js.map